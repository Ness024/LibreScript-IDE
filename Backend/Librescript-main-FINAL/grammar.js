// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley



  import lexer from "./lexer.js";
  const nodo = (type, properties, value) => {
    if (value !== undefined) return { type, ...properties, value };
    return { type, ...properties };
  };
  function id(x) { return x[0]; }
  const opBinaria = (op, izq, der) => nodo("OpBinaria", { operador: op, izquierda: izq, derecha: der });
  const opUnaria = (op, operando) => nodo("OpUnaria", { operador: op, operando: operando });
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "Programa", "symbols": ["_nl", "Sentencias", "_nl"], "postprocess": (d) => nodo("Programa", { sentencias: d[1] })},
    {"name": "Sentencias", "symbols": ["Sentencia", "_nl"], "postprocess": (d) => [d[0]]},
    {"name": "Sentencias", "symbols": ["Sentencias", "Sentencia", "_nl"], "postprocess": (d) => [...d[0], d[1]]},
    {"name": "Sentencias", "symbols": [(lexer.has("empty") ? {type: "empty"} : empty)], "postprocess": () => []},
    {"name": "Sentencia", "symbols": ["DeclaracionVariable"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["DeclaracionConstante"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["Asignacion"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["EstructuraControl"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["LlamadaImprimir"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["DeclaracionFuncion"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["DeclaracionClase"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["SentenciaDevolver"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["SentenciaRomper"], "postprocess": id},
    {"name": "Sentencia", "symbols": ["ExpresionSentencia"], "postprocess": id},
    {"name": "ExpresionSentencia", "symbols": ["Expresion", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("ExpresionSentencia", { expresion: d[0] })},
    {"name": "DeclaracionVariable", "symbols": [(lexer.has("IDENTIFICADOR_VAR") ? {type: "IDENTIFICADOR_VAR"} : IDENTIFICADOR_VAR), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo", "_", (lexer.has("OP_ASIGNACION") ? {type: "OP_ASIGNACION"} : OP_ASIGNACION), "_", "Expresion", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("DeclaracionVariable", { mutable: true, nombre: d[0], tipo: d[4], valor: d[8] })},
    {"name": "DeclaracionConstante", "symbols": [(lexer.has("IDENTIFICADOR_CONST") ? {type: "IDENTIFICADOR_CONST"} : IDENTIFICADOR_CONST), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo", "_", (lexer.has("OP_ASIGNACION") ? {type: "OP_ASIGNACION"} : OP_ASIGNACION), "_", "Expresion", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("DeclaracionConstante", { mutable: false, nombre: d[0], tipo: d[4], valor: d[8] })},
    {"name": "Tipo", "symbols": ["TipoBase"], "postprocess": id},
    {"name": "Tipo", "symbols": ["TipoBase", "_", (lexer.has("LBRACKET") ? {type: "LBRACKET"} : LBRACKET), "_", (lexer.has("RBRACKET") ? {type: "RBRACKET"} : RBRACKET)], "postprocess": (d) => nodo("TipoArreglo", { tipoElemento: d[0] })},
    {"name": "Tipo", "symbols": ["TipoBase", "_", (lexer.has("LBRACKET") ? {type: "LBRACKET"} : LBRACKET), "_", (lexer.has("RBRACKET") ? {type: "RBRACKET"} : RBRACKET), "_", (lexer.has("LBRACKET") ? {type: "LBRACKET"} : LBRACKET), "_", (lexer.has("RBRACKET") ? {type: "RBRACKET"} : RBRACKET)], "postprocess": (d) => nodo("TipoMatriz", { tipoElemento: d[0] })},
    {"name": "TipoBase", "symbols": [(lexer.has("TIPO_NUMERO") ? {type: "TIPO_NUMERO"} : TIPO_NUMERO)], "postprocess": (d) => d[0].value},
    {"name": "TipoBase", "symbols": [(lexer.has("TIPO_TEXTO") ? {type: "TIPO_TEXTO"} : TIPO_TEXTO)], "postprocess": (d) => d[0].value},
    {"name": "TipoBase", "symbols": [(lexer.has("TIPO_BOOLEANO") ? {type: "TIPO_BOOLEANO"} : TIPO_BOOLEANO)], "postprocess": (d) => d[0].value},
    {"name": "TipoBase", "symbols": [(lexer.has("TIPO_OBJETO") ? {type: "TIPO_OBJETO"} : TIPO_OBJETO)], "postprocess": (d) => d[0].value},
    {"name": "TipoBase", "symbols": [(lexer.has("PR_VACIO") ? {type: "PR_VACIO"} : PR_VACIO)], "postprocess": (d) => d[0].value},
    {"name": "TipoBase", "symbols": [(lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL)], "postprocess": (d) => d[0].value},
    {"name": "Asignacion", "symbols": ["Designable", "_", "OperadorAsignacionCompuesto", "_", "Expresion", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("Asignacion", { designable: d[0], operador: d[2].value, valor: d[4] })},
    {"name": "Asignacion", "symbols": ["Designable", "_", (lexer.has("OP_ASIGNACION") ? {type: "OP_ASIGNACION"} : OP_ASIGNACION), "_", "Expresion", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("Asignacion", { designable: d[0], operador: d[2].value, valor: d[4] })},
    {"name": "OperadorAsignacionCompuesto", "symbols": [(lexer.has("OP_ASIG_SUMA") ? {type: "OP_ASIG_SUMA"} : OP_ASIG_SUMA)], "postprocess": id},
    {"name": "OperadorAsignacionCompuesto", "symbols": [(lexer.has("OP_ASIG_RESTA") ? {type: "OP_ASIG_RESTA"} : OP_ASIG_RESTA)], "postprocess": id},
    {"name": "OperadorAsignacionCompuesto", "symbols": [(lexer.has("OP_ASIG_MULT") ? {type: "OP_ASIG_MULT"} : OP_ASIG_MULT)], "postprocess": id},
    {"name": "OperadorAsignacionCompuesto", "symbols": [(lexer.has("OP_ASIG_DIV") ? {type: "OP_ASIG_DIV"} : OP_ASIG_DIV)], "postprocess": id},
    {"name": "Designable", "symbols": [(lexer.has("IDENTIFICADOR_VAR") ? {type: "IDENTIFICADOR_VAR"} : IDENTIFICADOR_VAR)], "postprocess": id},
    {"name": "Designable", "symbols": [(lexer.has("IDENTIFICADOR_CONST") ? {type: "IDENTIFICADOR_CONST"} : IDENTIFICADOR_CONST)], "postprocess": id},
    {"name": "Designable", "symbols": ["AccesoMiembro"], "postprocess": id},
    {"name": "Designable", "symbols": ["AccesoArreglo"], "postprocess": id},
    {"name": "EstructuraControl", "symbols": ["CondicionalSi"], "postprocess": id},
    {"name": "EstructuraControl", "symbols": ["BucleMientras"], "postprocess": id},
    {"name": "EstructuraControl", "symbols": ["BuclePara"], "postprocess": id},
    {"name": "EstructuraControl", "symbols": ["EstructuraSegun"], "postprocess": id},
    {"name": "CondicionalSi$ebnf$1", "symbols": ["ClausulasSiNoSi"], "postprocess": id},
    {"name": "CondicionalSi$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "CondicionalSi$ebnf$2", "symbols": ["ClausulaSiNo"], "postprocess": id},
    {"name": "CondicionalSi$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "CondicionalSi", "symbols": [(lexer.has("PR_SI") ? {type: "PR_SI"} : PR_SI), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "Expresion", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", "BloqueCodigo", "_", "CondicionalSi$ebnf$1", "_", "CondicionalSi$ebnf$2"], "postprocess": (d) => nodo("CondicionalSi", { condicion: d[4], bloqueSi: d[8], bloquesSiNoSi: d[10] || [], bloqueSiNo: d[12] })},
    {"name": "ClausulasSiNoSi", "symbols": ["ClausulaSiNoSi"], "postprocess": (d) => [d[0]]},
    {"name": "ClausulasSiNoSi", "symbols": ["ClausulasSiNoSi", "_", "ClausulaSiNoSi"], "postprocess": (d) => [...d[0], d[2]]},
    {"name": "ClausulaSiNoSi", "symbols": [(lexer.has("PR_SINO_SI") ? {type: "PR_SINO_SI"} : PR_SINO_SI), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "Expresion", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", "BloqueCodigo"], "postprocess": (d) => nodo("ClausulaSiNoSi", { condicion: d[4], bloque: d[7] })},
    {"name": "ClausulaSiNo", "symbols": [(lexer.has("PR_SINO") ? {type: "PR_SINO"} : PR_SINO), "__", "BloqueCodigo"], "postprocess": (d) => nodo("ClausulaSiNo", { bloque: d[2] })},
    {"name": "BloqueCodigo", "symbols": [(lexer.has("LBRACE") ? {type: "LBRACE"} : LBRACE), "_nl", "Sentencias", "_nl", (lexer.has("RBRACE") ? {type: "RBRACE"} : RBRACE)], "postprocess": (d) => nodo("Bloque", { sentencias: d[2] })},
    {"name": "BucleMientras", "symbols": [(lexer.has("PR_MIENTRAS") ? {type: "PR_MIENTRAS"} : PR_MIENTRAS), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "Expresion", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", "BloqueCodigo"], "postprocess": (d) => nodo("BucleMientras", { condicion: d[4], bloque: d[8] })},
    {"name": "BuclePara$ebnf$1", "symbols": ["InicializadorPara"], "postprocess": id},
    {"name": "BuclePara$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "BuclePara$ebnf$2", "symbols": ["CondicionPara"], "postprocess": id},
    {"name": "BuclePara$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "BuclePara$ebnf$3", "symbols": ["IncrementoPara"], "postprocess": id},
    {"name": "BuclePara$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "BuclePara", "symbols": [(lexer.has("PR_PARA") ? {type: "PR_PARA"} : PR_PARA), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "BuclePara$ebnf$1", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA), "_", "BuclePara$ebnf$2", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA), "_", "BuclePara$ebnf$3", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", "BloqueCodigo"], "postprocess": (d) => nodo("BuclePara", { inicializacion: d[4], condicion: d[8], incremento: d[12], bloque: d[16] })},
    {"name": "InicializadorPara", "symbols": ["DeclaracionVariableSinPuntoComa"], "postprocess": id},
    {"name": "InicializadorPara", "symbols": ["AsignacionSinPuntoComa"], "postprocess": id},
    {"name": "DeclaracionVariableSinPuntoComa", "symbols": [(lexer.has("IDENTIFICADOR_VAR") ? {type: "IDENTIFICADOR_VAR"} : IDENTIFICADOR_VAR), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo", "_", (lexer.has("OP_ASIGNACION") ? {type: "OP_ASIGNACION"} : OP_ASIGNACION), "_", "Expresion"], "postprocess": (d) => nodo("DeclaracionVariable", { mutable: true, nombre: d[0], tipo: d[4], valor: d[8] })},
    {"name": "AsignacionSinPuntoComa", "symbols": ["Designable", "_", (lexer.has("OP_ASIGNACION") ? {type: "OP_ASIGNACION"} : OP_ASIGNACION), "_", "Expresion"], "postprocess": (d) => nodo("Asignacion", { designable: d[0], operador: d[2].value, valor: d[4] })},
    {"name": "CondicionPara", "symbols": ["Expresion"], "postprocess": id},
    {"name": "IncrementoPara", "symbols": ["Expresion"], "postprocess": id},
    {"name": "IncrementoPara", "symbols": ["AsignacionSinPuntoComa"], "postprocess": id},
    {"name": "EstructuraSegun$ebnf$1", "symbols": ["CasosSegun"], "postprocess": id},
    {"name": "EstructuraSegun$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "EstructuraSegun$ebnf$2", "symbols": ["OpcionPorDefectoSegun"], "postprocess": id},
    {"name": "EstructuraSegun$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "EstructuraSegun", "symbols": [(lexer.has("PR_SEGUN") ? {type: "PR_SEGUN"} : PR_SEGUN), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "Expresion", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", (lexer.has("LBRACE") ? {type: "LBRACE"} : LBRACE), "_nl", "EstructuraSegun$ebnf$1", "_nl", "EstructuraSegun$ebnf$2", "_nl", (lexer.has("RBRACE") ? {type: "RBRACE"} : RBRACE)], "postprocess": (d) => nodo("EstructuraSegun", { expresionEvaluar: d[4], casos: d[10] || [], pordefecto: d[12] })},
    {"name": "CasosSegun", "symbols": ["CasoSegun"], "postprocess": (d) => [d[0]]},
    {"name": "CasosSegun", "symbols": ["CasosSegun", "_nl", "CasoSegun"], "postprocess": (d) => [...d[0], d[2]]},
    {"name": "CasoSegun", "symbols": [(lexer.has("PR_CASO") ? {type: "PR_CASO"} : PR_CASO), "__", "Expresion", "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "BloqueCodigo", "_", (lexer.has("PR_ROMPER") ? {type: "PR_ROMPER"} : PR_ROMPER), "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("CasoSegun", { valorComparar: d[2], bloque: d[6] })},
    {"name": "OpcionPorDefectoSegun", "symbols": [(lexer.has("PR_PORDEFECTO") ? {type: "PR_PORDEFECTO"} : PR_PORDEFECTO), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "BloqueCodigo"], "postprocess": (d) => nodo("PorDefectoSegun", { bloque: d[4] })},
    {"name": "SentenciaDevolver$ebnf$1", "symbols": ["Expresion"], "postprocess": id},
    {"name": "SentenciaDevolver$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "SentenciaDevolver", "symbols": [(lexer.has("PR_DEVOLVER") ? {type: "PR_DEVOLVER"} : PR_DEVOLVER), "__", "SentenciaDevolver$ebnf$1", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("SentenciaDevolver", { valor: d[2] })},
    {"name": "SentenciaRomper", "symbols": [(lexer.has("PR_ROMPER") ? {type: "PR_ROMPER"} : PR_ROMPER), "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("SentenciaRomper", {})},
    {"name": "DeclaracionFuncion", "symbols": [(lexer.has("PR_FUNCION") ? {type: "PR_FUNCION"} : PR_FUNCION), "__", (lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "ListaParametrosOpcional", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo", "_", "BloqueCodigo"], "postprocess": (d) => nodo("DeclaracionFuncion", { nombre: d[2], parametros: d[6], tipoRetorno: d[12], bloque: d[14] })},
    {"name": "ListaParametrosOpcional", "symbols": ["ListaParametros"], "postprocess": id},
    {"name": "ListaParametrosOpcional", "symbols": [(lexer.has("empty") ? {type: "empty"} : empty)], "postprocess": () => []},
    {"name": "ListaParametros", "symbols": ["Parametro"], "postprocess": (d) => [d[0]]},
    {"name": "ListaParametros", "symbols": ["ListaParametros", "_", (lexer.has("COMA") ? {type: "COMA"} : COMA), "_", "Parametro"], "postprocess": (d) => [...d[0], d[4]]},
    {"name": "Parametro", "symbols": [(lexer.has("IDENTIFICADOR_VAR") ? {type: "IDENTIFICADOR_VAR"} : IDENTIFICADOR_VAR), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo"], "postprocess": (d) => nodo("Parametro", { nombre: d[0], tipo: d[4] })},
    {"name": "DeclaracionClase", "symbols": [(lexer.has("PR_CLASE") ? {type: "PR_CLASE"} : PR_CLASE), "__", (lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL), "_", "BloqueClase"], "postprocess": (d) => nodo("DeclaracionClase", { nombre: d[2], cuerpo: d[4] })},
    {"name": "BloqueClase", "symbols": [(lexer.has("LBRACE") ? {type: "LBRACE"} : LBRACE), "_nl", "MiembrosClase", "_nl", (lexer.has("RBRACE") ? {type: "RBRACE"} : RBRACE)], "postprocess": (d) => nodo("BloqueClase", { miembros: d[2] })},
    {"name": "MiembrosClase", "symbols": ["MiembroClase", "_nl"], "postprocess": (d) => [d[0]]},
    {"name": "MiembrosClase", "symbols": ["MiembrosClase", "MiembroClase", "_nl"], "postprocess": (d) => [...d[0], d[1]]},
    {"name": "MiembrosClase", "symbols": [(lexer.has("empty") ? {type: "empty"} : empty)], "postprocess": () => []},
    {"name": "MiembroClase", "symbols": ["PropiedadClase"], "postprocess": id},
    {"name": "MiembroClase", "symbols": ["ConstructorClase"], "postprocess": id},
    {"name": "MiembroClase", "symbols": ["MetodoClase"], "postprocess": id},
    {"name": "PropiedadClase", "symbols": [(lexer.has("ALMOHADILLA") ? {type: "ALMOHADILLA"} : ALMOHADILLA), "_", (lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("PropiedadClase", { nombre: d[2], tipo: d[6], visibilidad: "privada" })},
    {"name": "PropiedadClase", "symbols": [(lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo", "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("PropiedadClase", { nombre: d[0], tipo: d[4], visibilidad: "publica" })},
    {"name": "ConstructorClase", "symbols": [(lexer.has("PR_CONSTRUCTOR") ? {type: "PR_CONSTRUCTOR"} : PR_CONSTRUCTOR), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "ListaParametrosOpcional", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", "BloqueCodigo"], "postprocess": (d) => nodo("ConstructorClase", { parametros: d[4], bloque: d[7] })},
    {"name": "MetodoClase", "symbols": [(lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "ListaParametrosOpcional", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Tipo", "_", "BloqueCodigo"], "postprocess": (d) => nodo("MetodoClase", { nombre: d[0], parametros: d[4], tipoRetorno: d[8], bloque: d[10], visibilidad: "publica" })},
    {"name": "LlamadaImprimir", "symbols": [(lexer.has("PR_IMPRIMIR") ? {type: "PR_IMPRIMIR"} : PR_IMPRIMIR), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "ListaArgumentosOpcional", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN), "_", (lexer.has("PUNTO_Y_COMA") ? {type: "PUNTO_Y_COMA"} : PUNTO_Y_COMA)], "postprocess": (d) => nodo("Imprimir", { argumentos: d[4] })},
    {"name": "LlamadaLeer", "symbols": [(lexer.has("PR_LEER") ? {type: "PR_LEER"} : PR_LEER), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "ListaArgumentosOpcional", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN)], "postprocess": (d) => nodo("LlamadaLeer", { argumentos: d[4] })},
    {"name": "Expresion", "symbols": ["ExpresionLogicaOr"], "postprocess": id},
    {"name": "ExpresionLogicaOr", "symbols": ["ExpresionLogicaAnd"], "postprocess": id},
    {"name": "ExpresionLogicaOr", "symbols": ["ExpresionLogicaOr", "_", (lexer.has("OP_OR") ? {type: "OP_OR"} : OP_OR), "_", "ExpresionLogicaAnd"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionLogicaAnd", "symbols": ["ExpresionIgualdad"], "postprocess": id},
    {"name": "ExpresionLogicaAnd", "symbols": ["ExpresionLogicaAnd", "_", (lexer.has("OP_AND") ? {type: "OP_AND"} : OP_AND), "_", "ExpresionIgualdad"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionIgualdad", "symbols": ["ExpresionRelacional"], "postprocess": id},
    {"name": "ExpresionIgualdad", "symbols": ["ExpresionIgualdad", "_", (lexer.has("OP_EQ") ? {type: "OP_EQ"} : OP_EQ), "_", "ExpresionRelacional"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionIgualdad", "symbols": ["ExpresionIgualdad", "_", (lexer.has("OP_NEQ") ? {type: "OP_NEQ"} : OP_NEQ), "_", "ExpresionRelacional"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionRelacional", "symbols": ["ExpresionAditiva"], "postprocess": id},
    {"name": "ExpresionRelacional", "symbols": ["ExpresionRelacional", "_", (lexer.has("OP_LT") ? {type: "OP_LT"} : OP_LT), "_", "ExpresionAditiva"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionRelacional", "symbols": ["ExpresionRelacional", "_", (lexer.has("OP_GT") ? {type: "OP_GT"} : OP_GT), "_", "ExpresionAditiva"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionRelacional", "symbols": ["ExpresionRelacional", "_", (lexer.has("OP_LTE") ? {type: "OP_LTE"} : OP_LTE), "_", "ExpresionAditiva"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionRelacional", "symbols": ["ExpresionRelacional", "_", (lexer.has("OP_GTE") ? {type: "OP_GTE"} : OP_GTE), "_", "ExpresionAditiva"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionAditiva", "symbols": ["ExpresionMultiplicativa"], "postprocess": id},
    {"name": "ExpresionAditiva", "symbols": ["ExpresionAditiva", "_", (lexer.has("OP_SUMA") ? {type: "OP_SUMA"} : OP_SUMA), "_", "ExpresionMultiplicativa"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionAditiva", "symbols": ["ExpresionAditiva", "_", (lexer.has("OP_RESTA") ? {type: "OP_RESTA"} : OP_RESTA), "_", "ExpresionMultiplicativa"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionMultiplicativa", "symbols": ["ExpresionPotencia"], "postprocess": id},
    {"name": "ExpresionMultiplicativa", "symbols": ["ExpresionMultiplicativa", "_", (lexer.has("OP_MULT") ? {type: "OP_MULT"} : OP_MULT), "_", "ExpresionPotencia"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionMultiplicativa", "symbols": ["ExpresionMultiplicativa", "_", (lexer.has("OP_DIV") ? {type: "OP_DIV"} : OP_DIV), "_", "ExpresionPotencia"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionMultiplicativa", "symbols": ["ExpresionMultiplicativa", "_", (lexer.has("OP_MODULO") ? {type: "OP_MODULO"} : OP_MODULO), "_", "ExpresionPotencia"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionPotencia", "symbols": ["ExpresionUnaria"], "postprocess": id},
    {"name": "ExpresionPotencia", "symbols": ["ExpresionUnaria", "_", (lexer.has("OP_POTENCIA") ? {type: "OP_POTENCIA"} : OP_POTENCIA), "_", "ExpresionPotencia"], "postprocess": (d) => opBinaria(d[2].value, d[0], d[4])},
    {"name": "ExpresionUnaria", "symbols": ["ExpresionPostfija"], "postprocess": id},
    {"name": "ExpresionUnaria", "symbols": [(lexer.has("OP_NOT") ? {type: "OP_NOT"} : OP_NOT), "_", "ExpresionUnaria"], "postprocess": (d) => opUnaria(d[0].value, d[2])},
    {"name": "ExpresionUnaria", "symbols": [(lexer.has("OP_RESTA") ? {type: "OP_RESTA"} : OP_RESTA), "_", "ExpresionUnaria"], "postprocess": (d) => opUnaria(d[0].value, d[2])},
    {"name": "ExpresionPostfija", "symbols": ["LiteralPrimario"], "postprocess": id},
    {"name": "ExpresionPostfija", "symbols": ["ExpresionPostfija", "_", (lexer.has("OP_INCREMENTO") ? {type: "OP_INCREMENTO"} : OP_INCREMENTO)], "postprocess": (d) => opUnaria(d[1].value + "_post", d[0])},
    {"name": "ExpresionPostfija", "symbols": ["ExpresionPostfija", "_", (lexer.has("OP_DECREMENTO") ? {type: "OP_DECREMENTO"} : OP_DECREMENTO)], "postprocess": (d) => opUnaria(d[1].value + "_post", d[0])},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("numero") ? {type: "numero"} : numero)], "postprocess": (d) => nodo("LiteralNumero", {}, parseFloat(d[0].value))},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("texto") ? {type: "texto"} : texto)], "postprocess": (d) => nodo("LiteralTexto", {}, d[0].value.slice(1, -1))},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("LIT_VERDADERO") ? {type: "LIT_VERDADERO"} : LIT_VERDADERO)], "postprocess": (d) => nodo("LiteralBooleano", {}, true)},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("LIT_FALSO") ? {type: "LIT_FALSO"} : LIT_FALSO)], "postprocess": (d) => nodo("LiteralBooleano", {}, false)},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("IDENTIFICADOR_VAR") ? {type: "IDENTIFICADOR_VAR"} : IDENTIFICADOR_VAR)], "postprocess": (d) => nodo("Variable", {nombre: d[0].value})},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("IDENTIFICADOR_CONST") ? {type: "IDENTIFICADOR_CONST"} : IDENTIFICADOR_CONST)], "postprocess": (d) => nodo("Constante", {nombre: d[0].value})},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("PR_ESTE") ? {type: "PR_ESTE"} : PR_ESTE)], "postprocess": (d) => nodo("Este", {nombre: d[0].value})},
    {"name": "LiteralPrimario", "symbols": [(lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "Expresion", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN)], "postprocess": (d) => d[2]},
    {"name": "LiteralPrimario", "symbols": ["LlamadaFuncion"], "postprocess": id},
    {"name": "LiteralPrimario", "symbols": ["AccesoMiembro"], "postprocess": id},
    {"name": "LiteralPrimario", "symbols": ["AccesoArreglo"], "postprocess": id},
    {"name": "LiteralPrimario", "symbols": ["CreacionObjeto"], "postprocess": id},
    {"name": "LiteralPrimario", "symbols": ["CreacionArreglo"], "postprocess": id},
    {"name": "LiteralPrimario", "symbols": ["CreacionObjetoLiteral"], "postprocess": id},
    {"name": "LiteralPrimario", "symbols": ["LlamadaLeer"], "postprocess": id},
    {"name": "LlamadaFuncion", "symbols": ["DesignableLlamada", "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "ListaArgumentosOpcional", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN)], "postprocess": (d) => nodo("LlamadaFuncion", { callee: d[0], argumentos: d[4] })},
    {"name": "DesignableLlamada", "symbols": [(lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL)], "postprocess": (d) => nodo("IdentificadorGral", {nombre: d[0].value})},
    {"name": "DesignableLlamada", "symbols": ["AccesoMiembro"], "postprocess": id},
    {"name": "ListaArgumentosOpcional", "symbols": ["ListaArgumentos"], "postprocess": id},
    {"name": "ListaArgumentosOpcional", "symbols": [(lexer.has("empty") ? {type: "empty"} : empty)], "postprocess": () => []},
    {"name": "ListaArgumentos", "symbols": ["Expresion"], "postprocess": (d) => [d[0]]},
    {"name": "ListaArgumentos", "symbols": ["ListaArgumentos", "_", (lexer.has("COMA") ? {type: "COMA"} : COMA), "_", "Expresion"], "postprocess": (d) => [...d[0], d[4]]},
    {"name": "AccesoMiembro", "symbols": ["LiteralPrimario", "_", (lexer.has("PUNTO") ? {type: "PUNTO"} : PUNTO), "_", (lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL)], "postprocess": (d) => nodo("AccesoMiembro", { objeto: d[0], propiedad: d[4].value , accesoConAlmohadilla: false })},
    {"name": "AccesoMiembro", "symbols": ["LiteralPrimario", "_", (lexer.has("PUNTO") ? {type: "PUNTO"} : PUNTO), "_", (lexer.has("ALMOHADILLA") ? {type: "ALMOHADILLA"} : ALMOHADILLA), "_", (lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL)], "postprocess": (d) => nodo("AccesoMiembro", { objeto: d[0], propiedad: d[6].value , accesoConAlmohadilla: true })},
    {"name": "AccesoArreglo", "symbols": ["LiteralPrimario", "_", (lexer.has("LBRACKET") ? {type: "LBRACKET"} : LBRACKET), "_", "Expresion", "_", (lexer.has("RBRACKET") ? {type: "RBRACKET"} : RBRACKET)], "postprocess": (d) => nodo("AccesoArreglo", { arreglo: d[0], indice: d[4] })},
    {"name": "AccesoArreglo", "symbols": ["LiteralPrimario", "_", (lexer.has("LBRACKET") ? {type: "LBRACKET"} : LBRACKET), "_", "Expresion", "_", (lexer.has("RBRACKET") ? {type: "RBRACKET"} : RBRACKET), "_", (lexer.has("LBRACKET") ? {type: "LBRACKET"} : LBRACKET), "_", "Expresion", "_", (lexer.has("RBRACKET") ? {type: "RBRACKET"} : RBRACKET)], "postprocess": (d) => nodo("AccesoArregloDoble", { matriz: d[0], indice1: d[4], indice2: d[9] })},
    {"name": "CreacionObjeto", "symbols": [(lexer.has("PR_NUEVO") ? {type: "PR_NUEVO"} : PR_NUEVO), "__", (lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL), "_", (lexer.has("LPAREN") ? {type: "LPAREN"} : LPAREN), "_", "ListaArgumentosOpcional", "_", (lexer.has("RPAREN") ? {type: "RPAREN"} : RPAREN)], "postprocess": (d) => nodo("CreacionObjeto", { clase: d[2], argumentos: d[6] })},
    {"name": "CreacionArreglo", "symbols": [(lexer.has("LBRACKET") ? {type: "LBRACKET"} : LBRACKET), "_", "ListaArgumentosOpcional", "_", (lexer.has("RBRACKET") ? {type: "RBRACKET"} : RBRACKET)], "postprocess": (d) => nodo("CreacionArreglo", { elementos: d[2] })},
    {"name": "CreacionObjetoLiteral", "symbols": [(lexer.has("LBRACE") ? {type: "LBRACE"} : LBRACE), "_", "ParesClaveValorOpcional", "_", (lexer.has("RBRACE") ? {type: "RBRACE"} : RBRACE)], "postprocess": (d) => nodo("CreacionObjetoLiteral", { propiedades: d[2] })},
    {"name": "ParesClaveValorOpcional", "symbols": ["ParesClaveValor"], "postprocess": id},
    {"name": "ParesClaveValorOpcional", "symbols": [(lexer.has("empty") ? {type: "empty"} : empty)], "postprocess": () => []},
    {"name": "ParesClaveValor", "symbols": ["ParClaveValor"], "postprocess": (d) => [d[0]]},
    {"name": "ParesClaveValor", "symbols": ["ParesClaveValor", "_", (lexer.has("COMA") ? {type: "COMA"} : COMA), "_", "ParClaveValor"], "postprocess": (d) => [...d[0], d[4]]},
    {"name": "ParClaveValor", "symbols": [(lexer.has("IDENTIFICADOR_GRAL") ? {type: "IDENTIFICADOR_GRAL"} : IDENTIFICADOR_GRAL), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Expresion"], "postprocess": (d) => nodo("ParClaveValor", { clave: d[0].value, valor: d[4] })},
    {"name": "ParClaveValor", "symbols": [(lexer.has("texto") ? {type: "texto"} : texto), "_", (lexer.has("DOS_PUNTOS") ? {type: "DOS_PUNTOS"} : DOS_PUNTOS), "_", "Expresion"], "postprocess": (d) => nodo("ParClaveValor", { clave: d[0].value.slice(1,-1), valor: d[4] })},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", (lexer.has("ws") ? {type: "ws"} : ws)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": () => null},
    {"name": "__$ebnf$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", (lexer.has("ws") ? {type: "ws"} : ws)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": () => null},
    {"name": "_nl$ebnf$1", "symbols": []},
    {"name": "_nl$ebnf$1$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
    {"name": "_nl$ebnf$1$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
    {"name": "_nl$ebnf$1$subexpression$1", "symbols": [(lexer.has("comentario_linea") ? {type: "comentario_linea"} : comentario_linea)]},
    {"name": "_nl$ebnf$1$subexpression$1", "symbols": [(lexer.has("comentario_bloque") ? {type: "comentario_bloque"} : comentario_bloque)]},
    {"name": "_nl$ebnf$1", "symbols": ["_nl$ebnf$1", "_nl$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_nl", "symbols": ["_nl$ebnf$1"], "postprocess": () => null}
]
  , ParserStart: "Programa"
};
export default grammar;